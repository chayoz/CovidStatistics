/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assessment001.UI;

import assessment001.Country;
import assessment001.CountryJpaController;
import assessment001.Coviddata;
import assessment001.CoviddataJpaController;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.JOptionPane;
import okhttp3.OkHttpClient;
import okhttp3.Request;

/**
 *
 * @author manos
 */
public class DataManagement extends javax.swing.JFrame {
    EntityManagerFactory emf =Persistence.createEntityManagerFactory("Assessment001PU");
    EntityManager em = emf.createEntityManager();
    CountryJpaController cjc = new CountryJpaController(emf);
    CoviddataJpaController cdjc = new CoviddataJpaController(emf);
    
    EntityTransaction tx = em.getTransaction();
    /**
     * Creates new form DataManagement
     */
    public DataManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel1.setText("1. Covid19 data management");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setText("Select Data");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1. Deaths", "2. Confirmed", "3. Recovered" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jButton1.setText("Enter Countries");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Enter Data");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Delete Countries");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Delete Data");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(217, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(198, 198, 198))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jButton2)))
                .addGap(178, 178, 178)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jButton4)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(67, 67, 67)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String urlToCall = "https://covid2019-api.herokuapp.com/timeseries/confirmed";
        
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url(urlToCall).build();
        
        try (okhttp3.Response response = client.newCall(request).execute()){
            if (response.isSuccessful() && response.body() != null){
                String responseString = response.body().string();
                GsonBuilder builder = new GsonBuilder();
                builder.setPrettyPrinting();
                Gson gson = builder.create();
                
                JsonObject json = gson.fromJson(responseString, JsonObject.class);
                JsonArray items = json.get("confirmed").getAsJsonArray();
                
                for (JsonElement element : items){
                    JsonObject object = element.getAsJsonObject();
                    try {
                        String Name = object.getAsJsonObject().get("Country/Region").getAsString();
                        Double Lat = object.getAsJsonObject().get("Lat").getAsDouble();
                        Double Long1 = object.getAsJsonObject().get("Long").getAsDouble();
                        Country c = new Country();
                        c.setName(Name); c.setLat(Lat); c.setLong1(Long1);
                        
                        String name = object.getAsJsonObject().get("Country/Region").getAsString();
                        Query q1 = em.createQuery("SELECT c FROM Country c WHERE c.name = :name");
                        q1.setParameter("name", name);
                        
                        if(q1.getResultList().isEmpty()){
                            System.out.println("got in");
                            cjc.create(c);
                        }
                    } catch(Exception e) {
                        
                    }
                }
                JOptionPane.showMessageDialog(null, "The countries were registered in the database", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int a = JOptionPane.showConfirmDialog(null, "The system will delete from the database \n"+"all countries. Are you sure?","Delete Data",JOptionPane.YES_NO_OPTION);
        
        if (a == JOptionPane.YES_OPTION){
            try {
                tx.begin();
                
                Query q1 = em.createQuery("SELECT c FROM Coviddata c");
                if (q1.getResultList().isEmpty()){
                    em.createQuery("DELETE FROM Country").executeUpdate();
                    em.createNativeQuery("ALTER TABLE COUNTRY ALTER COLUMN COUNTRY RESTART WITH 1").executeUpdate();
                    tx.commit();
                    JOptionPane.showMessageDialog(null, "The Countries deleted from Database", "Delete Countries",JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Countries not deleted from Database \n"+ "Please delete the Coviddata first.", "Delete Countries",JOptionPane.INFORMATION_MESSAGE);
                }
            }catch(Exception ex){
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String type = (String) jComboBox2.getSelectedItem();
        String urlToCall = "";
        String jname = "";
        short  jtype = 0;
        switch (type){
                case "1. Deaths":
                    urlToCall = "https://covid2019-api.herokuapp.com/timeseries/deaths";
                    jtype = 1;
                    jname = "deaths";
                    break;
                case "2. Confirmed":
                    urlToCall = "https://covid2019-api.herokuapp.com/timeseries/confirmed";
                    jtype = 2;
                    jname = "confirmed";
                    break;
                case "3. Recovered":
                    urlToCall = "https://covid2019-api.herokuapp.com/timeseries/recovered";
                    jtype = 3;
                    jname = "recovered";
                    break;
                default:
                    break;
        }
        
        OkHttpClient client = new OkHttpClient();
        Request request = new Request.Builder().url(urlToCall).build();
        
        try (okhttp3.Response response = client.newCall(request).execute()){
            if (response.isSuccessful() && response.body() != null){
                String responseString = response.body().string();
                GsonBuilder builder = new GsonBuilder();
                builder.setPrettyPrinting();
                Gson gson = builder.create();
                
                JsonObject json = gson.fromJson(responseString, JsonObject.class);
                JsonArray items = json.get(jname).getAsJsonArray();                
                
                for (JsonElement element : items){
                    int qty = 0;
                    int mqty = 0;
                    JsonObject object = element.getAsJsonObject();                   
                    try {
                        String Name = object.getAsJsonObject().get("Country/Region").getAsString();
                                
                        Query q1 = em.createQuery("SELECT c FROM Country c WHERE c.name = :name");
                        q1.setParameter("name", Name);
                        
                        Query q = em.createQuery("SELECT c.country FROM Country c WHERE c.name = :name");
                        q.setParameter("name", Name);
                        
                        Country country = cjc.findCountry((Integer) q.getSingleResult());
                        for (String dates : object.keySet()){                          
                            if (dates.charAt(1) == '/' || dates.charAt(2) == '/'){                            
                                if(!(q1.getResultList().isEmpty())){   
                                    SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");
                                    Date date = sdf.parse(dates);
                                    
                                    int value = object.getAsJsonObject().get(dates).getAsInt();                             

                                    Coviddata c = new Coviddata();
                                    c.setTrndate(date); c.setCountry(country); c.setDatakind(jtype);
                                    if (value > qty) {
                                        c.setQty(value - qty);
                                        mqty += value - qty;
                                        c.setProodqty(mqty);
                                        qty = value;
                                    }else {
                                        c.setQty(0);
                                        c.setProodqty(mqty);
                                    }
                                    
                                    cdjc.create(c);
                                }
                            }                                             
                        }
                    } catch(Exception e) {
                        
                    }
                }
                JOptionPane.showMessageDialog(null, "The data were registered in the database", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int a = JOptionPane.showConfirmDialog(null, "The system will delete from the database \n"+"all coviddata. Are you sure?","Delete Data",JOptionPane.YES_NO_OPTION);
        
        if (a == JOptionPane.YES_OPTION){
            try {
                tx.begin();
                
                em.createQuery("DELETE FROM Coviddata").executeUpdate();
                em.createNativeQuery("ALTER TABLE COVIDDATA ALTER COLUMN COVIDDATA RESTART WITH 1").executeUpdate();
                tx.commit();
                JOptionPane.showMessageDialog(null, "The Coviddata deleted from Database", "Delete Coviddata",JOptionPane.INFORMATION_MESSAGE);

            }catch(Exception ex){
                System.out.println(ex);
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
